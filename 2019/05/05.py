import unittest

class Intcode:

    def get_op(self, code, i, j):
        op = code[i] // 100
        if (op // (10 ** j)) % 10 == 0:
            return code[code[i + 1 + j]]
        return code[i + 1 + j]

    def next_step(self, code_, i, fin_, fout_):
        code = code_[:]
        op = code[i]
        rop = op % 100
        if op == 99:
            return code, i, fin[:], fout[:]
        if rop == 1:
            a = self.get_op(code, i, 0)
            b = self.get_op(code, i, 1)
            code[code[i + 3]] = a + b
            fin, fout = fin_[:], fout_[:]
            i += 4
        elif rop == 2:
            a = self.get_op(code, i, 0)
            b = self.get_op(code, i, 1)
            code[code[i + 3]] = a * b
            fin, fout = fin_[:], fout_[:]
            i += 4
        elif rop == 3:
            code[code[i + 1]] = fin_[0]
            fin, fout = fin_[1:], fout_[:]
            i += 2
        elif rop == 4:
            if (op // 100) % 10 == 0:
                fin, fout = fin_[:], fout_[:] + [code[code[i + 1]]]
            else:
                fin, fout = fin_[:], fout_[:] + [code[i + 1]]
            i += 2
        elif rop == 5:
            a = self.get_op(code, i, 0)
            b = self.get_op(code, i, 1)
            if a != 0:
                i = b
            else:
                i += 3
            fin, fout = fin_, fout_
        elif rop == 6:
            a = self.get_op(code, i, 0)
            b = self.get_op(code, i, 1)
            if a == 0:
                i = b
            else:
                i += 3
            fin, fout = fin_, fout_
        elif rop == 7:
            a = self.get_op(code, i, 0)
            b = self.get_op(code, i, 1)
            if a < b:
                code[code[i + 3]] = 1
            else:
                code[code[i + 3]] = 0
            i += 4
            fin, fout = fin_, fout_
        elif rop == 8:
            a = self.get_op(code, i, 0)
            b = self.get_op(code, i, 1)
            if a == b:
                code[code[i + 3]] = 1
            else:
                code[code[i + 3]] = 0
            i += 4
            fin, fout = fin_, fout_
        return code, i, fin, fout

    def run(self, code_, fin_):
        code = code_[:]
        pos = 0
        fin = fin_
        fout = []
        while code[pos] != 99:
            code, pos, fin, fout = self.next_step(code, pos, fin, fout)
        return fout


class TestIntcode(unittest.TestCase):

    def test_run_999(self):
        f = Intcode()
        code = [3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
                1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
                999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99]
        fout = f.run(code, [-100])
        self.assertEqual(fout, [999])
        fout = f.run(code, [8])
        self.assertEqual(fout, [1000])
        fout = f.run(code, [99])
        self.assertEqual(fout, [1001])

    def test_run_jump(self):
        f = Intcode()
        fout = f.run([3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9], [0])
        self.assertEqual(fout, [0])
        fout = f.run([3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9], [9])
        self.assertEqual(fout, [1])
        fout = f.run([3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1], [0])
        self.assertEqual(fout, [0])
        fout = f.run([3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1], [-9])
        self.assertEqual(fout, [1])

    def test_run_lessi8(self):
        f = Intcode()
        fout = f.run([3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8], [7])
        self.assertEqual(fout, [1])
        fout = f.run([3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8], [8])
        self.assertEqual(fout, [0])
        fout = f.run([3, 3, 1107, -1, 8, 3, 4, 3, 99], [7])
        self.assertEqual(fout, [1])
        fout = f.run([3, 3, 1107, -1, 8, 3, 4, 3, 99], [8])
        self.assertEqual(fout, [0])

    def test_run_eq8(self):
        f = Intcode()
        fout = f.run([3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8], [8])
        self.assertEqual(fout, [1])
        fout = f.run([3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8], [13])
        self.assertEqual(fout, [0])
        fout = f.run([3, 3, 1108, -1, 8, 3, 4, 3, 99], [8])
        self.assertEqual(fout, [1])
        fout = f.run([3, 3, 1108, -1, 8, 3, 4, 3, 99], [13])
        self.assertEqual(fout, [0])

    def test_next_step(self):
        f = Intcode()
        self.assertEqual(([1002, 4, 3, 4, 99], 4, [], []), f.next_step([1002, 4, 3, 4, 33], 0, [], []))
        self.assertEqual(([1101, 100, -1, 4, 99], 4, [], []), f.next_step([1101, 100, -1, 4, 0], 0, [], []))
        self.assertEqual(([4, 2, -1], 2, [], [-1]), f.next_step([4, 2, -1], 0, [], []))
        self.assertEqual(([3, 2, 5], 2, [], []), f.next_step([3, 2, -1], 0, [5], []))
        self.assertEqual(([2, 0, 0, 0, 99], 4, [], []), f.next_step([1, 0, 0, 0, 99], 0, [], []))
        self.assertEqual(([2, 3, 0, 6, 99], 4, [], []), f.next_step([2, 3, 0, 3, 99], 0, [], []))
        self.assertEqual(([2, 4, 4, 5, 99, 9801], 4, [], []), f.next_step([2, 4, 4, 5, 99, 0], 0, [], []))
        self.assertEqual(([1, 1, 1, 4, 2, 5, 6, 0, 99], 4, [], []), f.next_step([1, 1, 1, 4, 99, 5, 6, 0, 99], 0, [], []))
        self.assertEqual(([30, 1, 1, 4, 2, 5, 6, 0, 99], 8, [], []), f.next_step([1, 1, 1, 4, 2, 5, 6, 0, 99], 4, [], []))



#unittest.main()

intcode = Intcode()
code_ = list(map(int, "3,225,1,225,6,6,1100,1,238,225,104,0,1102,91,92,225,1102,85,13,225,1,47,17,224,101,-176,224,224,4,224,1002,223,8,223,1001,224,7,224,1,223,224,223,1102,79,43,225,1102,91,79,225,1101,94,61,225,1002,99,42,224,1001,224,-1890,224,4,224,1002,223,8,223,1001,224,6,224,1,224,223,223,102,77,52,224,1001,224,-4697,224,4,224,102,8,223,223,1001,224,7,224,1,224,223,223,1101,45,47,225,1001,43,93,224,1001,224,-172,224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,1102,53,88,225,1101,64,75,225,2,14,129,224,101,-5888,224,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,101,60,126,224,101,-148,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1102,82,56,224,1001,224,-4592,224,4,224,1002,223,8,223,101,4,224,224,1,224,223,223,1101,22,82,224,1001,224,-104,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,677,224,102,2,223,223,1005,224,329,1001,223,1,223,1007,226,226,224,1002,223,2,223,1006,224,344,101,1,223,223,108,226,226,224,1002,223,2,223,1006,224,359,1001,223,1,223,107,226,677,224,102,2,223,223,1006,224,374,101,1,223,223,8,677,677,224,102,2,223,223,1006,224,389,1001,223,1,223,1008,226,677,224,1002,223,2,223,1006,224,404,101,1,223,223,7,677,677,224,1002,223,2,223,1005,224,419,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,434,101,1,223,223,1108,226,226,224,102,2,223,223,1005,224,449,1001,223,1,223,107,226,226,224,102,2,223,223,1005,224,464,101,1,223,223,1007,677,677,224,102,2,223,223,1006,224,479,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1008,226,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1108,677,226,224,1002,223,2,223,1006,224,524,1001,223,1,223,108,677,677,224,1002,223,2,223,1005,224,539,101,1,223,223,108,226,677,224,1002,223,2,223,1005,224,554,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,1107,677,677,224,102,2,223,223,1005,224,584,1001,223,1,223,7,677,226,224,102,2,223,223,1005,224,599,1001,223,1,223,8,677,226,224,1002,223,2,223,1005,224,614,1001,223,1,223,7,226,677,224,1002,223,2,223,1006,224,629,101,1,223,223,1107,677,226,224,1002,223,2,223,1005,224,644,1001,223,1,223,1107,226,677,224,102,2,223,223,1006,224,659,1001,223,1,223,107,677,677,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226".split(',')))
fout = intcode.run(code_, [5])
print(fout)
